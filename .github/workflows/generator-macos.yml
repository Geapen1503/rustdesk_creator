name: Build RustDesk macOS Client
on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Rendezvous Server'
        required: true
        default: ''
        type: string
      key:
        description: 'Public Key'
        required: true
        default: ''
        type: string
      apiServer:
        description: 'API Server'
        required: true
        default: ''
        type: string
      custom:
        description: "Custom JSON"
        required: true
        default: ''
        type: string
      uuid:
        description: "uuid of request"
        required: true
        default: ''
        type: string
      iconlink:
        description: "icon link"
        required: false
        default: 'false'
        type: string
      logolink:
        description: "logo link"
        required: false
        default: 'false'
        type: string
      appname:
        description: "app name"
        required: true
        default: 'rustdesk'
        type: string
      filename:
        description: "Filename"
        required: true
        default: 'rustdesk'
        type: string
      extras:
        description: "extra inputs in json"
        required: true
        default: '{}'
        type: string

env:
  FLUTTER_VERSION: "3.24.5"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  RUST_VERSION: "1.75"
  MAC_RUST_VERSION: "1.75"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'

jobs:
  build-for-macOS:
    name: ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-apple-darwin,
              os: macos-13,
              extra-build-args: "",
              arch: x86_64,
            }
          - {
              target: aarch64-apple-darwin,
              os: macos-latest,
              extra-build-args: "--screencapturekit",
              arch: aarch64,
            }

    steps:
      - name: Checkout source code
        if: ${{ env.VERSION != 'master' }}
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk
          ref: refs/tags/${{ env.VERSION }}
          submodules: recursive

      - name: Checkout source code
        if: ${{ env.VERSION == 'master' }}
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk
          submodules: recursive

      - name: Configure git
        run: |
          git config --global http.postBuffer 524288000
          git config --global core.compression 0
          git config --global http.lowSpeedLimit 1000
          git config --global http.lowSpeedTime 300
          git config --global url."https://".insteadOf git://
          mkdir -p ~/.cargo
          echo '[net]' > ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 5' >> ~/.cargo/config.toml

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Setup flutter
        run: |
          flutter config --no-analytics
          flutter doctor -v
          cd flutter
          flutter clean
          flutter pub get
          cd ..

      - name: Install dependencies
        run: |
          brew install nasm yasm pkg-config cmake
          brew install --cask xquartz
          cargo install cargo-bundle

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ./vcpkg/installed
          key: ${{ runner.os }}-${{ matrix.job.target }}-vcpkg-${{ hashFiles('./vcpkg/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-vcpkg-

      - name: Install vcpkg dependencies
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh
          vcpkg install libvpx:${{ matrix.job.arch }}-osx
          vcpkg integrate install

      - name: Configure Build
        run: |
          mkdir -p src/config
          echo "${{ env.RS_PUB_KEY }}" > ./src/key.pub
          cat > src/config/build.rs << EOF
          pub const RENDEZVOUS_SERVER: &str = "${{ env.RENDEZVOUS_SERVER }}";
          pub const API_SERVER: &str = "${{ env.API_SERVER }}";
          EOF

      - name: Build
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
        run: |
          cargo build --release ${{ matrix.job.extra-build-args }} --target ${{ matrix.job.target }}

      - name: Bundle macOS App
        run: |
          cargo bundle --release --target ${{ matrix.job.target }}

      - name: Create DMG
        run: |
          brew install create-dmg
          create-dmg \
            --volname "${{ inputs.appname }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ inputs.appname }}.app" 200 190 \
            --hide-extension "${{ inputs.appname }}.app" \
            --app-drop-link 600 185 \
            "${{ inputs.filename }}-${{ matrix.job.arch }}.dmg" \
            "target/${{ matrix.job.target }}/release/bundle/macos/${{ inputs.appname }}.app"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.filename }}-macos-${{ matrix.job.arch }}
          path: |
            ${{ inputs.filename }}-${{ matrix.job.arch }}.dmg
            target/${{ matrix.job.target }}/release/bundle/macos/${{ inputs.appname }}.app
