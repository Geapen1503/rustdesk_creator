name: Custom macOS Client Generator
run-name: Custom macOS Client Generator
on: 
  workflow_dispatch:
    inputs:
      server:
        description: 'Rendezvous Server'
        required: true
        default: ''
        type: string
      key:
        description: 'Public Key'
        required: true
        default: ''
        type: string
      apiServer:
        description: 'API Server'
        required: true
        default: ''
        type: string
      custom:
        description: "Custom JSON"
        required: true
        default: ''
        type: string
      uuid:
        description: "uuid of request"
        required: true
        default: ''
        type: string
      iconlink:
        description: "icon link"
        required: false
        default: 'false'
        type: string
      logolink:
        description: "logo link"
        required: false
        default: 'false'
        type: string
      appname:
        description: "app name"
        required: true
        default: 'rustdesk'
        type: string
      filename:
        description: "Filename"
        required: true
        default: 'rustdesk'
        type: string
      extras:
        description: "Extra JSON inputs"
        required: true
        default: '{}'
        type: string

env:
  FLUTTER_VERSION: "3.24.5"
  RUST_VERSION: "1.75"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  API_SERVER: "${{ inputs.apiServer }}"
  CUSTOM: "${{ inputs.custom }}"
  SLOGAN: "${{ inputs.slogan }}"
  STATUS_URL: "${{ secrets.GENURL }}/updategh"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml
    with:
      version: ${{ fromJson(inputs.extras).version }}

  build-for-macOS:
    name: ${{ matrix.job.target }}
    runs-on: self-hosted
    needs: [generate-bridge]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: aarch64-apple-darwin,
              os: macos-latest,
              extra-build-args: "--screencapturekit",
              arch: aarch64,
            }
    steps:
      - name: Report Status - Starting
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.STATUS_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"uuid": "${{ inputs.uuid }}", "status": "Starting macOS build..."}'

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk
          ref: ${{ fromJson(inputs.extras).version != 'master' && format('refs/tags/{0}', fromJson(inputs.extras).version) || 'master' }}
          submodules: recursive

      - name: Install Rust toolchain and dependencies
        run: |
          rustup target add aarch64-apple-darwin
          cargo install cargo-bundle
          cargo install cargo-xcode
          brew install create-dmg

      - name: Install Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Build macOS app
        run: |
          # Build using xcodebuild instead of cargo bundle
          python3 build.py --flutter --flutter-build-args="--release" ${{ matrix.job.extra-build-args }}
          
          cd flutter
          flutter build macos --release
          
          cd build/macos/Build/Products/Release
          
          # Sign the app bundle
          codesign --force \
            --options runtime \
            --sign "${{ secrets.MACOS_CODESIGN_IDENTITY }}" \
            --timestamp \
            --deep \
            "${{ inputs.appname }}.app"
          
          # Verify signature
          codesign --verify --deep --strict "${{ inputs.appname }}.app"

      - name: Create DMG
        run: |
          cd flutter/build/macos/Build/Products/Release
          create-dmg \
            --volname "${{ inputs.appname }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ inputs.appname }}.app" 200 190 \
            --hide-extension "${{ inputs.appname }}.app" \
            --app-drop-link 600 185 \
            "${{ inputs.filename }}-${{ matrix.job.arch }}.dmg" \
            "${{ inputs.appname }}.app"

      - name: Notarize DMG
        if: env.MACOS_NOTARIZE_JSON != ''
        env:
          NOTARIZATION_JSON: ${{ secrets.MACOS_NOTARIZE_JSON }}
        run: |
          # Create notarization profile
          xcrun notarytool store-credentials "notarytool" \
            --apple-id "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" \
            --team-id "${{ secrets.MACOS_TEAM_ID }}" \
            --password "${{ secrets.MACOS_NOTARIZATION_PASSWORD }}"
            
          # Submit for notarization
          xcrun notarytool submit \
            "./flutter/build/macos/Build/Products/Release/${{ inputs.filename }}-${{ matrix.job.arch }}.dmg" \
            --keychain-profile "notarytool" \
            --wait

      - name: Upload to server
        if: ${{ fromJson(inputs.extras).rdgen == 'true' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.GEN_FTP_SERVER }}
          username: ${{ secrets.GEN_FTP_USER }}
          password: ${{ secrets.GEN_FTP_PASSWORD }}
          local-dir: ./flutter/build/macos/Build/Products/Release/
          server-dir: /root/rdgen/exe/${{ env.UUIDFOLDER }}/
          include: |
            ${{ inputs.filename }}-${{ matrix.job.arch }}.dmg

      - name: Report Status - Success
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.STATUS_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"uuid": "${{ inputs.uuid }}", "status": "Success"}'

      - name: Report Status - Failure
        if: failure()
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.STATUS_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"uuid": "${{ inputs.uuid }}", "status": "Build failed, please try again"}'
