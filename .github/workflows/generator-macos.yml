name: Build RustDesk macOS Custom Client

on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Server'
        required: true
      key:
        description: 'Key'
        required: true
      apiServer:
        description: 'API Server'
        required: true
      custom:
        description: 'Custom settings'
        required: true
      uuid:
        description: 'UUID'
        required: true
      iconlink:
        description: 'Icon link'
        required: true
      logolink:
        description: 'Logo link'
        required: true
      appname:
        description: 'App name'
        required: true
      extras:
        description: 'Extra settings'
        required: true
      filename:
        description: 'Filename'
        required: true

env:
  SCITER_RUST_VERSION: "1.75"
  RUST_VERSION: "1.75"
  FLUTTER_VERSION: "3.19.6"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'
  STATUS_URL: "${{ secrets.GENURL }}/updategh"

jobs:
  build-macos:
    runs-on: self-hosted
    steps:
      - name: Update build status
        continue-on-error: true
        run: |
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"Starting macOS build...\"}"

      - uses: actions/checkout@v3
        with:
          repository: 'rustdesk/rustdesk'
          ref: "${{ env.VERSION }}"
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: aarch64-apple-darwin

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: |
          brew install nasm yasm pkg-config cmake
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }}

      - name: Download custom assets
        if: ${{ inputs.iconlink != 'false' || inputs.logolink != 'false' }}
        run: |
          mkdir -p flutter/assets
          if [ "${{ inputs.iconlink }}" != "false" ]; then
            ICON_JSON='${{ inputs.iconlink }}'
            ICON_URL=$(echo $ICON_JSON | jq -r '.url')
            ICON_UUID=$(echo $ICON_JSON | jq -r '.uuid')
            ICON_FILE=$(echo $ICON_JSON | jq -r '.file')
            curl -o flutter/assets/icon.png "$ICON_URL/png/$ICON_UUID/$ICON_FILE"
          fi
          if [ "${{ inputs.logolink }}" != "false" ]; then
            LOGO_JSON='${{ inputs.logolink }}'
            LOGO_URL=$(echo $LOGO_JSON | jq -r '.url')
            LOGO_UUID=$(echo $LOGO_JSON | jq -r '.uuid')
            LOGO_FILE=$(echo $LOGO_JSON | jq -r '.file')
            curl -o flutter/assets/logo.png "$LOGO_URL/png/$LOGO_UUID/$LOGO_FILE"
          fi

      - name: Create custom.txt file
        run: |
          echo -n "${{ env.CUSTOM }}" | base64 -d > custom.txt

      - name: Setup Flutter project
        run: |
          # Remove existing flutter directory if it exists
          rm -rf flutter
          
          # Clone the Flutter repository
          git clone https://github.com/rustdesk/rustdesk-flutter.git flutter
          
          # Create assets directory if it doesn't exist
          mkdir -p flutter/assets
          
          # Copy custom.txt and assets
          cp custom.txt flutter/
          if [ -f flutter/assets/icon.png ]; then
            cp flutter/assets/icon.png flutter/assets/
          fi
          if [ -f flutter/assets/logo.png ]; then
            cp flutter/assets/logo.png flutter/assets/
          fi
          
          # Copy necessary files from main rustdesk repo
          cp -r src/flutter_ffi flutter/
          cp -r src/common flutter/
          mkdir -p flutter/resources
          cp -r res/* flutter/resources/

      - name: Generate Bridge Code
        run: |
          cd flutter
          flutter pub get
          flutter_rust_bridge_codegen --rust-input ../src/bridge_generated.rs --dart-output ./lib/generated_bridge.dart
          
          # Copy the generated bridge file to the correct location
          mkdir -p lib/generated
          cp lib/generated_bridge.dart lib/generated/
          
      - name: Build macOS App
        run: |
          cd flutter
          flutter pub get
          flutter build macos --release
          cd ../
          mkdir -p ./SignOutput

      - name: Create DMG
        run: |
          cd flutter/build/macos/Build/Products/Release
          if [ "${{ inputs.appname }}" != "" ]; then
            mv "RustDesk.app" "${{ inputs.appname }}.app"
            APP_NAME="${{ inputs.appname }}"
          else
            APP_NAME="RustDesk"
          fi
          hdiutil create -volname "$APP_NAME" -srcfolder "$APP_NAME.app" -ov -format UDZO "${{ inputs.filename }}.dmg"
          mv "${{ inputs.filename }}.dmg" ../../../../../../SignOutput/
          
      - name: Sign DMG
        if: env.MACOS_P12_BASE64 != ''
        env:
          MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
          MACOS_P12_PASSWORD: "${{ secrets.MACOS_P12_PASSWORD }}"
        run: |
          echo $MACOS_P12_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p mysecretpassword build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p mysecretpassword build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_P12_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k mysecretpassword build.keychain
          /usr/bin/codesign --force -s "Developer ID Application" --keychain build.keychain "./SignOutput/${{ inputs.filename }}.dmg"

      - name: Upload to FTP
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.GEN_FTP_SERVER }}
          username: ${{ secrets.GEN_FTP_USER }}
          password: ${{ secrets.GEN_FTP_PASSWORD }}
          local-dir: ./SignOutput/
          server-dir: exe/${{ env.UUIDFOLDER }}/

      - name: Update build status
        if: always()
        continue-on-error: true
        run: |
          if [ ${{ job.status }} == "success" ]; then
            STATUS="Success"
          else
            STATUS="Build failed"
          fi
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"$STATUS\"}"
