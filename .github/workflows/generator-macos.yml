name: Custom macOS Client Generator
run-name: Custom macOS Client Generator
on: 
  workflow_dispatch:
    inputs:
      server:
        description: 'Rendezvous Server'
        required: true
        default: ''
        type: string
      key:
        description: 'Public Key'
        required: true
        default: ''
        type: string
      apiServer:
        description: 'API Server'
        required: true
        default: ''
        type: string
      custom:
        description: "Custom JSON"
        required: true
        default: ''
        type: string
      uuid:
        description: "uuid of request"
        required: true
        default: ''
        type: string
      iconlink:
        description: "icon link"
        required: false
        default: 'false'
        type: string
      logolink:
        description: "logo link"
        required: false
        default: 'false'
        type: string
      appname:
        description: "app name"
        required: true
        default: 'rustdesk'
        type: string
      filename:
        description: "Filename"
        required: true
        default: 'rustdesk'
        type: string
      extras:
        description: "extra inputs in json"
        required: true
        default: '{}'
        type: string

env:
  SCITER_RUST_VERSION: "1.75" # https://github.com/rustdesk/rustdesk/discussions/7503, also 1.78 has ABI change which causes our sciter version not working, https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  RUST_VERSION: "1.75" # sciter failed on m1 with 1.78 because of https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  MAC_RUST_VERSION: "1.81" 
  CARGO_NDK_VERSION: "3.1.2"
  SCITER_ARMV7_CMAKE_VERSION: "3.29.7"
  SCITER_NASM_DEBVERSION: "2.14-1"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5" # >= 3.16 is very slow on my android phone, but work well on most of others. We may switch to new flutter after changing to texture rendering (I believe it can solve my problem).
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"  # for arm64 linux because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.16.9"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2024.07.12
  VCPKG_COMMIT_ID: "1de2026f28ead93ff1773e6e680387643e914ea1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  NDK_VERSION: "r27b"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: "${{ secrets.ANDROID_SIGNING_KEY }}"
  MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"
  STATUS_URL: "${{ secrets.GENURL }}/updategh"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml
    with:
      version: ${{ fromJson(inputs.extras).version }}

  build-for-macos-flutter:
    name: Build macOS
    runs-on: macos-latest
    needs: [generate-bridge]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: aarch64-apple-darwin,
              os: macos-latest,
              # extra-build-args: "--disable-flutter-texture-render", # disable this for mac, because we see a lot of users reporting flickering both on arm and x64, and we can not confirm if texture rendering has better performance if htere is no vram, https://github.com/rustdesk/rustdesk/issues/6296
              extra-build-args: "--screencapturekit",
              arch: aarch64,
              vcpkg-triplet: arm64-osx,
            }

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Set rdgen value
        if: ${{ fromJson(inputs.extras).rdgen == 'true' }}
        run: |
          echo "STATUS_URL=${{ secrets.GENURL }}/updategh" >> $env:GITHUB_ENV

      - name: Set rdgen value
        if: ${{ fromJson(inputs.extras).rdgen == 'false' }}
        run: |
          echo "STATUS_URL=${{ inputs.apiServer }}/api/updategh" >> $env:GITHUB_ENV

      
      - name: Checkout source code
        if: ${{ env.VERSION != 'master' }}
        uses: actions/checkout@v4
        with:
            repository: rustdesk/rustdesk
            ref: refs/tags/${{ env.VERSION }}
  
      - name: Checkout source code
        if: ${{ env.VERSION == 'master' }}
        uses: actions/checkout@v4
        with:
            repository: rustdesk/rustdesk

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
              name: bridge-artifact
              path: ./

      - name: Install ImageMagick on macOS
        run: |
          brew install imagemagick
          echo "$(brew --prefix imagemagick)/bin" >> $GITHUB_PATH

      - name: cargo.toml, runner.rc name, en.rs
        continue-on-error: false
        shell: bash
        run: |
          cp ./Cargo.toml ./Cargo.toml.bak
          sed -i '' -e 's|description = "RustDesk Remote Desktop"|description = "${{ inputs.appname }}"|' ./Cargo.toml
          sed -i '' -e 's|ProductName = "RustDesk"|ProductName = "${{ inputs.appname }}"|' ./Cargo.toml
          sed -i '' -e 's|FileDescription = "RustDesk Remote Desktop"|FileDescription = "${{ inputs.appname }}"|' ./Cargo.toml
          sed -i '' -e 's|OriginalFilename = "rustdesk.exe"|OriginalFilename = "${{ inputs.appname }}.exe"|' ./Cargo.toml
          
          cp ./libs/portable/Cargo.toml ./libs/portable/Cargo.toml.bak
          sed -i '' -e 's|description = "RustDesk Remote Desktop"|description = "${{ inputs.appname }}"|' ./libs/portable/Cargo.toml
          sed -i '' -e 's|ProductName = "RustDesk"|ProductName = "${{ inputs.appname }}"|' ./libs/portable/Cargo.toml
          sed -i '' -e 's|FileDescription = "RustDesk Remote Desktop"|FileDescription = "${{ inputs.appname }}"|' ./libs/portable/Cargo.toml
          sed -i '' -e 's|OriginalFilename = "rustdesk.exe"|OriginalFilename = "${{ inputs.appname }}.exe"|' ./libs/portable/Cargo.toml
            
          cp ./flutter/windows/runner/Runner.rc ./flutter/windows/runner/Runner.rc.bak
          sed -i '' -e 's|"RustDesk Remote Desktop"|"${{ inputs.appname }}"|' ./flutter/windows/runner/Runner.rc
          sed -i '' -e 's|VALUE "InternalName", "rustdesk" "\0"|VALUE "InternalName", "${{ inputs.appname }}" "\0"|' ./flutter/windows/runner/Runner.rc
          sed -i '' -e 's|"Copyright 2024 Purslane Ltd. All rights reserved."|"Copyright 2024"|' ./flutter/windows/runner/Runner.rc
          sed -i '' -e 's|"rustdesk.exe"|"${{ inputs.appname }}"|' ./flutter/windows/runner/Runner.rc
          sed -i '' -e 's|"RustDesk"|"${{ inputs.appname }}"|' ./flutter/windows/runner/Runner.rc
           
          cp ./src/lang/en.rs ./src/lang/en.rs.bak
          sed -i '' -e 's|RustDesk|${{ inputs.appname }}|' ./src/lang/en.rs
           
          sed -i '' -e 's|Homepage: https://rustdesk.com|Homepage: ${{ fromJson(inputs.extras).urlLink }}|' ./build.py
          sed -i '' -e "s|launchUrl(Uri.parse('https://rustdesk.com'));|launchUrl(Uri.parse('${{ fromJson(inputs.extras).urlLink }}'));|" ./flutter/lib/common.dart
          sed -i '' -e "s|launchUrlString('https://rustdesk.com');|launchUrlString('${{ fromJson(inputs.extras).urlLink }}');|" ./flutter/lib/desktop/pages/desktop_setting_page.dart
          sed -i '' -e "s|launchUrlString('https://rustdesk.com/privacy.html')|launchUrlString('${{ fromJson(inputs.extras).urlLink }}/privacy.html')|" ./flutter/lib/desktop/pages/desktop_setting_page.dart
          sed -i '' -e "s|const url = 'https://rustdesk.com/';|const url = '${{ fromJson(inputs.extras).urlLink }}';|" ./flutter/lib/mobile/pages/settings_page.dart
          sed -i '' -e "s|launchUrlString('https://rustdesk.com/privacy.html')|launchUrlString('${{ fromJson(inputs.extras).urlLink }}/privacy.html')|" ./flutter/lib/mobile/pages/settings_page.dart
          sed -i '' -e "s|https://rustdesk.com/privacy.html|${{ fromJson(inputs.extras).urlLink }}/privacy.html|" ./flutter/lib/desktop/pages/install_page.dart
            
          sed -i '' -e '/const KEY:/,/};/d' ./src/common.rs
          sed -i '' -e '/let Ok(data) = sign::verify(&data, &pk)/,/};/d' ./src/common.rs
            
          # Update pubspec.yaml with proper YAML formatting
          cp ./flutter/pubspec.yaml ./flutter/pubspec.yaml.bak
          echo "  archive: ^3.6.1" > ./flutter/temp_dependency.txt
          awk '/intl:/{print;system("cat ./flutter/temp_dependency.txt");next}1' ./flutter/pubspec.yaml > ./flutter/pubspec.yaml.tmp
          mv ./flutter/pubspec.yaml.tmp ./flutter/pubspec.yaml
          rm ./flutter/temp_dependency.txt

      - name: Install flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Patch flutter
        continue-on-error: true
        run: |
            cp .github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff $(dirname $(dirname $(which flutter)))
            cd $(dirname $(dirname $(which flutter)))
            [[ "3.24.4" == 3.24.5 ]] && git apply flutter_3.24.4_dropdown_menu_enableFilter.diff
      
      - name: Workaround for flutter issue
        shell: bash
        run: |
          cd "$(dirname "$(which flutter)")"
          # https://github.com/flutter/flutter/issues/1.3.43
          sed -i -e 's/_setFramesEnabledState(false);/\/\/_setFramesEnabledState(false);/g' ../packages/flutter/lib/src/scheduler/binding.dart
          grep -n '_setFramesEnabledState(false);' ../packages/flutter/lib/src/scheduler/binding.dart
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
            toolchain: ${{ env.MAC_RUST_VERSION }}
            targets: ${{ matrix.job.target }}
            components: "rustfmt"
  
        
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
            vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
            doNotCache: false
  
      - name: Install vcpkg dependencies
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi

      - name: Icon stuff
        if: ${{ inputs.iconlink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          mv ./res/icon.ico ./res/icon.ico.bak
          mv ./res/icon.png ./res/icon.png.bak
          mv ./res/tray-icon.ico ./res/tray-icon.ico.bak
          #echo "${{ inputs.iconbase64 }}" | base64 -d > ./res/icon.png

      - name: Magick stuff
        if: ${{ inputs.iconlink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          # Download icon using curl with additional SSL options
            curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
              -H "User-Agent: Mozilla/5.0" \
              "${{ fromJson(inputs.iconlink).url }}/get_png?filename=${{ fromJson(inputs.iconlink).file }}&uuid=${{ fromJson(inputs.iconlink).uuid }}" \
              -o ./res/icon.png || wget --no-check-certificate -O ./res/icon.png "${{ fromJson(inputs.iconlink).url }}/get_png?filename=${{ fromJson(inputs.iconlink).file }}&uuid=${{ fromJson(inputs.iconlink).uuid }}"
            
            # Backup existing files
            mv ./res/32x32.png ./res/32x32.png.bak || true
            mv ./res/64x64.png ./res/64x64.png.bak || true
            mv ./res/128x128.png ./res/128x128.png.bak || true
            mv ./res/128x128@2x.png ./res/128x128@2x.png.bak || true
            
            # Create ico and resize images
            convert ./res/icon.png -define icon:auto-resize=256,64,48,32,16 ./res/icon.ico
            cp ./res/icon.ico ./res/tray-icon.ico
            convert ./res/icon.png -resize 32x32 ./res/32x32.png
            convert ./res/icon.png -resize 64x64 ./res/64x64.png
            convert ./res/icon.png -resize 128x128 ./res/128x128.png
            convert ./res/128x128.png -resize 200% ./res/128x128@2x.png

      - name: ui.rs
        if: ${{ inputs.iconlink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          cp ./src/ui.rs ./src/ui.rs.bak
          if [ -f "./res/icon.png" ]; then
            SEARCH_STR="iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAACXBIWXMAAEiuAABIrgHwmhA7AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAEx9JREFUeJztnXmYHMV5h9"
            b64=$(base64 < ./res/icon.png)
            sed -i '' -e "s~$SEARCH_STR.*\"~$b64\"~" ./src/ui.rs
          fi
           
      - name: fix connection delay
        continue-on-error: false
        if: ${{ fromJson(inputs.extras).delayFix == 'true' }}
        shell: bash
        run: |
          sed -i '' -e '/if !key.is_empty() && !token.is_empty() {/,/}/d' ./src/client.rs

      - name: replace flutter icons
        continue-on-error: false
        shell: bash
        run: |
          cd ./flutter
          # Create required directories and files
          mkdir -p web
          echo '{"name":"RustDesk","short_name":"RustDesk","start_url":"/","display":"standalone","background_color":"#ffffff","theme_color":"#ffffff","description":"A remote desktop software."}' > web/manifest.json
          echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>RustDesk</title></head><body></body></html>' > web/index.html
          
          mkdir -p macos/Runner/Assets.xcassets/AppIcon.appiconset
          echo '{"images":[{"size":"16x16","idiom":"mac","filename":"app_icon_16.png","scale":"1x"},{"size":"16x16","idiom":"mac","filename":"app_icon_32.png","scale":"2x"},{"size":"32x32","idiom":"mac","filename":"app_icon_32.png","scale":"1x"},{"size":"32x32","idiom":"mac","filename":"app_icon_64.png","scale":"2x"},{"size":"128x128","idiom":"mac","filename":"app_icon_128.png","scale":"1x"},{"size":"128x128","idiom":"mac","filename":"app_icon_256.png","scale":"2x"},{"size":"256x256","idiom":"mac","filename":"app_icon_256.png","scale":"1x"},{"size":"256x256","idiom":"mac","filename":"app_icon_512.png","scale":"2x"},{"size":"512x512","idiom":"mac","filename":"app_icon_512.png","scale":"1x"},{"size":"512x512","idiom":"mac","filename":"app_icon_1024.png","scale":"2x"}],"info":{"version":1,"author":"xcode"}}' > macos/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
          
          flutter pub upgrade win32
          flutter pub get
          flutter pub run flutter_launcher_icons
          cd ..
      
      - name: Install rcodesign tool
        if: env.MACOS_P12_BASE64 != null
        shell: bash
        run: |
          pushd /tmp
          wget https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-macos-universal.tar.gz
          tar -zxvf apple-codesign-0.22.0-macos-universal.tar.gz
          mv apple-codesign-0.22.0-macos-universal/rcodesign /usr/local/bin
          popd

      - name: Install build runtime
        run: |
          brew install llvm create-dmg nasm cmake gcc wget ninja
          # pkg-config is handled in a separate step, because it may be already installed by `macos-latest`(14.7.1) runner
          if command -v pkg-config &>/dev/null; then
              echo "pkg-config is already installed"
          else
              brew install pkg-config
          fi
  
      - name: Show version information (Rust, cargo, Clang)
        shell: bash
        run: |
          clang --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V
      
      - name: Build rustdesk
        run: |
          if [ "${{ matrix.job.target }}" = "aarch64-apple-darwin" ]; then
            MIN_MACOS_VERSION="12.3"
            sed -i -e "s/MACOSX_DEPLOYMENT_TARGET\=[0-9]*.[0-9]*/MACOSX_DEPLOYMENT_TARGET=${MIN_MACOS_VERSION}/" build.py
            sed -i -e "s/platform :osx, '.*'/platform :osx, '${MIN_MACOS_VERSION}'/" flutter/macos/Podfile
            sed -i -e "s/osx_minimum_system_version = \"[0-9]*.[0-9]*\"/osx_minimum_system_version = \"${MIN_MACOS_VERSION}\"/" Cargo.toml
            sed -i -e "s/MACOSX_DEPLOYMENT_TARGET = [0-9]*.[0-9]*;/MACOSX_DEPLOYMENT_TARGET = ${MIN_MACOS_VERSION};/" flutter/macos/Runner.xcodeproj/project.pbxproj
          fi
          ./build.py --flutter --hwcodec ${{ matrix.job.extra-build-args }}

      - name: icon svg handling
        if: ${{ inputs.iconlink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          mv ./rustdesk/data/flutter_assets/assets/icon.svg ./rustdesk/data/flutter_assets/assets/icon.svg.bak || true
          convert ./res/icon.png ./rustdesk/data/flutter_assets/assets/icon.svg

      - name: logo handling
        if: ${{ inputs.logolink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            "${{ fromJson(inputs.logolink).url }}/get_png?filename=${{ fromJson(inputs.logolink).file }}&uuid=${{ fromJson(inputs.logolink).uuid }}" \
            -o ./rustdesk/data/flutter_assets/assets/logo.png || \
          wget --no-check-certificate \
            -O ./rustdesk/data/flutter_assets/assets/logo.png \
            "${{ fromJson(inputs.logolink).url }}/get_png?filename=${{ fromJson(inputs.logolink).file }}&uuid=${{ fromJson(inputs.logolink).uuid }}"

      - name: Sign macOS app bundle
        if: env.MACOS_P12_BASE64 != ''
        run: |
            cd flutter/build/macos/Build/Products/Release
            # Debug info
            echo "Current directory contents:"
            ls -la
            
            # Rename RustDesk.app to the custom app name first
            if [ -d "RustDesk.app" ]; then
              mv "RustDesk.app" "${{ inputs.appname }}.app"
              echo "Renamed RustDesk.app to ${{ inputs.appname }}.app"
            fi
            
            echo "App bundle contents after rename:"
            ls -la "${{ inputs.appname }}.app" || echo "App not found"
            ls -la "${{ inputs.appname }}.app/Contents" || echo "Contents not found"
            
            # Decode the certificate
            echo "${{ secrets.MACOS_P12_BASE64 }}" | base64 --decode > certificate.p12
            
            # Sign the app bundle and its contents
            if [ -d "${{ inputs.appname }}.app/Contents/MacOS" ]; then
              echo "Signing main executable..."
              MAIN_EXECUTABLE="${{ inputs.appname }}.app/Contents/MacOS/${{ inputs.appname }}"
              if [ -f "$MAIN_EXECUTABLE" ]; then
                rcodesign sign --p12-file certificate.p12 --p12-password "${{ secrets.MACOS_P12_PASSWORD }}" \
                  --code-signature-flags runtime "$MAIN_EXECUTABLE"
              else
                echo "Main executable not found at expected path: $MAIN_EXECUTABLE"
                # Try to find the actual executable
                echo "Available executables in MacOS directory:"
                ls -la "${{ inputs.appname }}.app/Contents/MacOS/"
                ACTUAL_EXECUTABLE=$(ls "${{ inputs.appname }}.app/Contents/MacOS/" | head -n 1)
                if [ -n "$ACTUAL_EXECUTABLE" ]; then
                  echo "Found executable: $ACTUAL_EXECUTABLE"
                  rcodesign sign --p12-file certificate.p12 --p12-password "${{ secrets.MACOS_P12_PASSWORD }}" \
                    --code-signature-flags runtime "${{ inputs.appname }}.app/Contents/MacOS/$ACTUAL_EXECUTABLE"
                fi
              fi
              
              echo "Signing frameworks..."
              find "${{ inputs.appname }}.app/Contents/Frameworks" -type f -not -name ".*" -exec \
                rcodesign sign --p12-file certificate.p12 --p12-password "${{ secrets.MACOS_P12_PASSWORD }}" \
                --code-signature-flags runtime {} \;
              
              echo "Signing main bundle..."
              rcodesign sign --p12-file certificate.p12 --p12-password "${{ secrets.MACOS_P12_PASSWORD }}" \
                --code-signature-flags runtime "${{ inputs.appname }}.app"
            else
              echo "Error: Invalid app bundle structure"
              exit 1
            fi
            
            # Clean up
            rm certificate.p12 

      - name: Create DMG
        run: |
          cd flutter/build/macos/Build/Products/Release
          # Print directory contents for debugging
          echo "Directory contents:"
          ls -la
          # Find the actual .app bundle
          if [ -d "RustDesk.app" ]; then
            # First rename the app if it's still called RustDesk.app
            mv "RustDesk.app" "${{ inputs.appname }}.app"
          fi
          if [ ! -d "${{ inputs.appname }}.app" ]; then
            echo "Could not find .app bundle!"
            exit 1
          fi
          echo "Creating DMG for ${{ inputs.appname }}.app"
          create-dmg \
            --volname "${{ inputs.appname }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${{ inputs.appname }}.app" 200 190 \
            --hide-extension "${{ inputs.appname }}.app" \
            --app-drop-link 600 185 \
            "${{ inputs.appname }}-${{ matrix.job.arch }}.dmg" \
            "${{ inputs.appname }}.app"
          mv "${{ inputs.appname }}-${{ matrix.job.arch }}.dmg" $GITHUB_WORKSPACE/
      
      - name: Upload unsigned macOS app
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@master
        with:
          name: ${{ inputs.appname }}-${{ matrix.job.arch }}
          path: ${{ inputs.appname }}-${{ matrix.job.arch }}.dmg 
          
      #- name: Upload unsigned
      #  if: env.UPLOAD_ARTIFACT == 'true'
      #  uses: actions/upload-artifact@master
      #  with:
      #    name: rustdesk-unsigned-windows-${{ matrix.job.arch }}
      #    path: rustdesk

      - name: Rename rustdesk
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          for name in ${{ inputs.appname }}*??.dmg; do
            mv "$name" "${name%%.dmg}-aarch64.dmg"
          done
      
      #- name: Package macOS App
      #  run: |
      #    cd flutter/build/macos/Build/Products/Release
      #    if [ -d "RustDesk.app" ]; then
      #      mv "RustDesk.app" "${{ inputs.appname }}.app"
      #    fi

      - name: Publish DMG package
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ inputs.upload-tag }}
          files: |
            ${{ inputs.appname }}*-${{ matrix.job.arch }}.dmg

      - name: Report Status
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.STATUS_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"uuid": "${{ inputs.uuid }}", "status": "macOS build complete"}'
