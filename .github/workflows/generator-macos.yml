name: Build RustDesk macOS Client
on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Rendezvous Server'
        required: true
        default: ''
        type: string
      key:
        description: 'Public Key'
        required: true
        default: ''
        type: string
      apiServer:
        description: 'API Server'
        required: true
        default: ''
        type: string
      custom:
        description: "Custom JSON"
        required: true
        default: ''
        type: string
      uuid:
        description: "uuid of request"
        required: true
        default: ''
        type: string
      iconlink:
        description: "icon link"
        required: false
        default: 'false'
        type: string
      logolink:
        description: "logo link"
        required: false
        default: 'false'
        type: string
      appname:
        description: "app name"
        required: true
        default: 'rustdesk'
        type: string
      filename:
        description: "Filename"
        required: true
        default: 'rustdesk'
        type: string
      extras:
        description: "extra inputs in json"
        required: true
        default: '{}'
        type: string

env:
  RUST_VERSION: "1.75" # sciter failed on m1 with 1.78 because of https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  MAC_RUST_VERSION: "1.81" 
  CARGO_NDK_VERSION: "3.1.2"
  SCITER_ARMV7_CMAKE_VERSION: "3.29.7"
  SCITER_NASM_DEBVERSION: "2.14-1"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5" 
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  # for arm64 linux because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.16.9"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2024.07.12
  VCPKG_COMMIT_ID: "1de2026f28ead93ff1773e6e680387643e914ea1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  NDK_VERSION: "r27c"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: "${{ secrets.ANDROID_SIGNING_KEY }}"
  MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"
  STATUS_URL: "${{ secrets.GENURL }}/updategh"

jobs:
  build-for-macOS:
    name: ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: aarch64-apple-darwin,
              os: macos-latest,
              extra-build-args: "",
              arch: aarch64,
            }

    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Set rdgen value
        run: |
          echo "STATUS_URL=${{ inputs.apiServer }}/api/updategh" >> $env:GITHUB_ENV

      - name: Set rdgen value
        if: ${{ fromJson(inputs.extras).rdgen == 'true' }}
        run: |
          echo "STATUS_URL=${{ secrets.GENURL }}/updategh" >> $env:GITHUB_ENV

      - name: Report Status
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.STATUS_URL }}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"uuid": "${{ inputs.uuid }}", "status": "5% complete"}'      

      - name: Checkout source code
        if: ${{ env.VERSION != 'master' }}
        uses: actions/checkout@v4
        with:
            repository: rustdesk/rustdesk
            ref: refs/tags/${{ env.VERSION }}
    
      - name: Checkout source code
        if: ${{ env.VERSION == 'master' }}
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk

      - name: Import Certificate
        uses: apple-actions/import-codesign-certs@v1
        if: env.MACOS_P12_BASE64 != ''
        with:
          p12-file-base64: ${{ secrets.MACOS_P12_BASE64 }}
          p12-password: ${{ secrets.MACOS_P12_PASSWORD }}

      - name: Configure git
        run: |
          git config --global http.postBuffer 524288000
          git config --global core.compression 0
          git config --global http.lowSpeedLimit 1000
          git config --global http.lowSpeedTime 300
          git config --global url."https://".insteadOf git://
          mkdir -p ~/.cargo
          echo '[net]' > ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 5' >> ~/.cargo/config.toml

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.MAC_RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: rustfmt

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-${{ matrix.job.target }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-vcpkg-

      - name: Install dependencies
        run: |
          brew install nasm yasm pkg-config cmake
          brew install --cask xquartz
          cargo install cargo-bundle

      - name: Install vcpkg dependencies
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: arm64-osx
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            libvpx:arm64-osx \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          

      - name: Configure Build
        run: |
          echo "VCPKG_ROOT=$VCPKG_ROOT" >> $GITHUB_ENV
          echo "LIBVPX_PATH=$VCPKG_ROOT/installed/arm64-osx" >> $GITHUB_ENV
          rustup target add ${{ matrix.job.target }}

      - name: Generate Flutter Rust Bridge
        run: |
          cd flutter
          flutter pub get
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }}
          flutter_rust_bridge_codegen --rust-input ../src/flutter_ffi.rs --dart-output ./lib/generated_bridge.dart --c-output ./macos/Runner/bridge_generated.h --rust-output ../src/bridge_generated.rs
          cd ..

      - name: Build rustdesk
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
        run: |
          python3 ./build.py --flutter
          cd flutter
          flutter build macos --release
          cd ..

      - name: Bundle macOS App
        run: |
          mkdir -p target/aarch64-apple-darwin/release/bundle/macos/
          cp -r flutter/build/macos/Build/Products/Release/*.app target/aarch64-apple-darwin/release/bundle/macos/

      - name: Create DMG
        run: |
          APP_NAME="${{ inputs.appname }}"
          DMG_NAME="${{ inputs.filename }}-${{ matrix.job.arch }}.dmg"
          APP_PATH="target/aarch64-apple-darwin/release/bundle/macos/${APP_NAME}.app"
          
          # Verify app exists
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: App bundle not found at $APP_PATH"
            ls -la target/aarch64-apple-darwin/release/bundle/macos/
            exit 1
          fi
          
          brew install create-dmg
          create-dmg \
            --volname "${{ inputs.appname }}" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "${APP_NAME}.app" 200 190 \
            --hide-extension "${APP_NAME}.app" \
            --app-drop-link 600 185 \
            "$DMG_NAME" \
            "$APP_PATH"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.filename }}-macos-${{ matrix.job.arch }}
          path: |
            ${{ inputs.filename }}-${{ matrix.job.arch }}.dmg
            target/${{ matrix.job.target }}/release/bundle/macos/${{ inputs.appname }}.app
