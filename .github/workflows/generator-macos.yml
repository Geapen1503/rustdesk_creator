name: Build RustDesk macOS Custom Client

on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Server'
        required: true
      key:
        description: 'Key'
        required: true
      apiServer:
        description: 'API Server'
        required: true
      custom:
        description: 'Custom settings'
        required: true
      uuid:
        description: 'UUID'
        required: true
      iconlink:
        description: 'Icon link'
        required: true
      logolink:
        description: 'Logo link'
        required: true
      appname:
        description: 'App name'
        required: true
      extras:
        description: 'Extra settings'
        required: true
      filename:
        description: 'Filename'
        required: true

env:
  SCITER_RUST_VERSION: "1.75"
  RUST_VERSION: "1.75"
  FLUTTER_VERSION: "3.24.5"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'
  STATUS_URL: "${{ secrets.GENURL }}/updategh"
  SLOGAN: "${{ fromJson(inputs.extras).slogan }}"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml
    with:
      version: ${{ fromJson(inputs.extras).version }}
      
  build-for-macOS:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [generate-bridge]
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install build runtime
        run: |
          brew install \
            cmake \
            gcc \
            pkg-config \
            wget \
            nasm \
            yasm \
            ninja \
            create-dmg \
            llvm \
            pkg-config \
            ninja-build

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: aarch64-apple-darwin
          components: rustfmt

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          repository: rustdesk/rustdesk
          ref: ${{ env.VERSION != 'master' && format('refs/tags/{0}', env.VERSION) || 'master' }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Setup Flutter project
        run: |
          cd flutter
          flutter clean
          flutter config --enable-macos-desktop
          flutter doctor -v
          sed -i '' 's/extended_text: 14.0.0/extended_text: 13.0.0/' pubspec.yaml
          flutter pub get
          cd ..

      - name: Build rustdesk
        run: |
          export FLUTTER_ROOT="$(dirname $(which flutter))"
          export PATH="$FLUTTER_ROOT/bin:$PATH"
          ./build.py --flutter --hwcodec

      - name: Create unsigned DMG
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          CREATE_DMG="$(command -v create-dmg)"
          CREATE_DMG="$(readlink -f "$CREATE_DMG")"
          sed -i -e 's/MAXIMUM_UNMOUNTING_ATTEMPTS=3/MAXIMUM_UNMOUNTING_ATTEMPTS=7/' "$CREATE_DMG"
          
          cd flutter/build/macos/Build/Products/Release
          chmod -R +x RustDesk.app
          if [ "${{ inputs.appname }}" != "" ]; then
            mv "RustDesk.app" "${{ inputs.appname }}.app"
            APP_NAME="${{ inputs.appname }}"
          else
            APP_NAME="RustDesk"
          fi
          
          create-dmg \
            --volname "$APP_NAME" \
            --window-size 800 400 \
            --icon "$APP_NAME.app" 200 190 \
            --hide-extension "$APP_NAME.app" \
            --app-drop-link 600 185 \
            "${{ inputs.filename }}.dmg" \
            "./$APP_NAME.app"
          
          mkdir -p ../../../../../../SignOutput/
          mv "${{ inputs.filename }}.dmg" ../../../../../../SignOutput/

      - name: Sign DMG
        if: env.MACOS_P12_BASE64 != null && env.UPLOAD_ARTIFACT == 'true'
        run: |
          # Patch create-dmg to give more attempts to unmount image
          CREATE_DMG="$(command -v create-dmg)"
          CREATE_DMG="$(readlink -f "$CREATE_DMG")"
          sed -i -e 's/MAXIMUM_UNMOUNTING_ATTEMPTS=3/MAXIMUM_UNMOUNTING_ATTEMPTS=7/' "$CREATE_DMG"
          # start sign the rustdesk.app and dmg
          rm -rf *.dmg || true
          codesign --force --options runtime -s ${{ secrets.MACOS_CODESIGN_IDENTITY }} --deep --strict ./flutter/build/macos/Build/Products/Release/${{ inputs.appname }}.app -vvv
          create-dmg --icon "${{ inputs.appname }}.app" 200 190 --hide-extension "${{ inputs.appname }}.app" --window-size 800 400 --app-drop-link 600 185 "${{ inputs.filename }}.dmg" ./flutter/build/macos/Build/Products/Release/${{ inputs.appname }}.app
          codesign --force --options runtime -s ${{ secrets.MACOS_CODESIGN_IDENTITY }} --deep --strict "${{ inputs.filename }}.dmg" -vvv
          # notarize the dmg
          rcodesign notary-submit --api-key-path ~/.p12/api-key.json --staple "${{ inputs.filename }}.dmg"

      - name: Upload to FTP
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.GEN_FTP_SERVER }}
          username: ${{ secrets.GEN_FTP_USER }}
          password: ${{ secrets.GEN_FTP_PASSWORD }}
          local-dir: ./SignOutput/
          server-dir: exe/${{ env.UUIDFOLDER }}/

      - name: Update build status
        if: always()
        continue-on-error: true
        run: |
          if [ ${{ job.status }} == "success" ]; then
            STATUS="Success"
          else
            STATUS="Build failed"
          fi
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"$STATUS\"}"
