name: Build RustDesk macOS Custom Client

on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Server'
        required: true
      key:
        description: 'Key'
        required: true
      apiServer:
        description: 'API Server'
        required: true
      custom:
        description: 'Custom settings'
        required: true
      uuid:
        description: 'UUID'
        required: true
      iconlink:
        description: 'Icon link'
        required: true
      logolink:
        description: 'Logo link'
        required: true
      appname:
        description: 'App name'
        required: true
      extras:
        description: 'Extra settings'
        required: true
      filename:
        description: 'Filename'
        required: true

env:
  SCITER_RUST_VERSION: "1.75"
  RUST_VERSION: "1.75"
  FLUTTER_VERSION: "3.19.6"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'
  STATUS_URL: "${{ secrets.GENURL }}/updategh"
  SLOGAN: "${{ fromJson(inputs.extras).slogan }}"


jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml
    with:
      version: ${{ fromJson(inputs.extras).version }}

  build-macos:
    needs: generate-bridge
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Update build status
        continue-on-error: true
        run: |
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"Starting macOS build...\"}"

       - uses: actions/checkout@v3
        with:
          repository: 'rustdesk/rustdesk'
          ref: "${{ env.VERSION }}"
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: aarch64-apple-darwin

      - name: Install Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          brew install nasm yasm pkg-config cmake create-dmg ninja
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }}
      
      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Setup Flutter project
        run: |
          cd src/ui/flutter
          flutter clean
          flutter pub get
          flutter config --enable-macos-desktop
          cd ../../..

      - name: Build rustdesk
        run: |
          cd src/ui/flutter
          flutter build macos --release --no-tree-shake-icons
          cd ../../..

      - name: Create DMG
        run: |
          CREATE_DMG="$(command -v create-dmg)"
          CREATE_DMG="$(readlink -f "$CREATE_DMG")"
          sed -i -e 's/MAXIMUM_UNMOUNTING_ATTEMPTS=3/MAXIMUM_UNMOUNTING_ATTEMPTS=7/' "$CREATE_DMG"
          
          cd src/ui/flutter/build/macos/Build/Products/Release
          if [ "${{ inputs.appname }}" != "" ]; then
            mv "RustDesk.app" "${{ inputs.appname }}.app"
            APP_NAME="${{ inputs.appname }}"
          else
            APP_NAME="RustDesk"
          fi
          
          create-dmg \
            --icon "$APP_NAME.app" 200 190 \
            --hide-extension "$APP_NAME.app" \
            --window-size 800 400 \
            --app-drop-link 600 185 \
            "${{ inputs.filename }}.dmg" \
            ./"$APP_NAME.app"
          mkdir -p ../../../../../../../../SignOutput/
          mv "${{ inputs.filename }}.dmg" ../../../../../../../../SignOutput/

      - name: Sign DMG
        if: env.MACOS_P12_BASE64 != ''
        env:
          MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
          MACOS_P12_PASSWORD: "${{ secrets.MACOS_P12_PASSWORD }}"
        run: |
          echo $MACOS_P12_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p mysecretpassword build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p mysecretpassword build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_P12_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k mysecretpassword build.keychain
          codesign --force --options runtime -s "Developer ID Application" --keychain build.keychain "./SignOutput/${{ inputs.filename }}.dmg" -vvv

      - name: Upload to FTP
        if: ${{ env.UPLOAD_ARTIFACT == 'true' }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.GEN_FTP_SERVER }}
          username: ${{ secrets.GEN_FTP_USER }}
          password: ${{ secrets.GEN_FTP_PASSWORD }}
          local-dir: ./SignOutput/
          server-dir: exe/${{ env.UUIDFOLDER }}/

      - name: Update build status
        if: always()
        continue-on-error: true
        run: |
          if [ ${{ job.status }} == "success" ]; then
            STATUS="Success"
          else
            STATUS="Build failed"
          fi
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"$STATUS\"}"
