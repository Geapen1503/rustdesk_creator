name: Build RustDesk macOS Client
on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Rendezvous Server'
        required: true
        default: ''
        type: string
      key:
        description: 'Public Key'
        required: true
        default: ''
        type: string
      apiServer:
        description: 'API Server'
        required: true
        default: ''
        type: string
      custom:
        description: "Custom JSON"
        required: true
        default: ''
        type: string
      uuid:
        description: "uuid of request"
        required: true
        default: ''
        type: string
      iconlink:
        description: "icon link"
        required: false
        default: 'false'
        type: string
      logolink:
        description: "logo link"
        required: false
        default: 'false'
        type: string
      appname:
        description: "app name"
        required: true
        default: 'rustdesk'
        type: string
      filename:
        description: "Filename"
        required: true
        default: 'rustdesk'
        type: string
      extras:
        description: "extra inputs in json"
        required: true
        default: '{}'
        type: string

env:
  CARGO_TERM_COLOR: always
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  LIBVPX_VERSION: v1.11.0
  APP_NAME: ${{ github.event.inputs.app_name }}
  RUSTDESK_SERVER: ${{ github.event.inputs.server_ip }}
  API_SERVER: ${{ github.event.inputs.api_server }}
  CUSTOM_URL: ${{ github.event.inputs.custom_url }}
  RUSTDESK_VERSION: ${{ github.event.inputs.version }}

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Checkout specific version
        run: |
          if [ "${{ github.event.inputs.version }}" != "master" ]; then
            git checkout tags/${{ github.event.inputs.version }}
          fi

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      
      - name: Install dependencies
        run: |
          brew install nasm yasm pkg-config cmake
          brew install --cask xquartz
          cargo install cargo-bundle
          
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ./vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('./vcpkg/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-
            
      - name: Install vcpkg dependencies
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh
          vcpkg install libvpx:x64-osx
          vcpkg integrate install
          
      - name: Build libvpx
        run: |
          git clone https://chromium.googlesource.com/webm/libvpx
          cd libvpx
          git checkout ${{ env.LIBVPX_VERSION }}
          ./configure --enable-static --enable-pic --enable-vp9-highbitdepth --disable-examples --disable-tools --disable-docs --disable-unit-tests --disable-shared
          make -j$(sysctl -n hw.physicalcpu)
          sudo make install
          cd ..
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Configure Build
        run: |
          # Create config directory if it doesn't exist
          mkdir -p src/config
          
          # Generate config file
          cat > src/config/build.rs << EOF
          pub const FEATURE_DELAY_FIX: bool = ${{ github.event.inputs.delay_fix }};
          pub const FEATURE_DISABLE_SETTINGS: bool = ${{ github.event.inputs.disable_settings }};
          pub const FEATURE_DENY_LAN: bool = ${{ github.event.inputs.deny_lan }};
          pub const FEATURE_PASSWORD_MODE: &str = "${{ github.event.inputs.password_mode }}";
          EOF
          
          if [ -n "${{ github.event.inputs.permanent_password }}" ]; then
            echo "pub const PERMANENT_PASSWORD: &str = \"${{ github.event.inputs.permanent_password }}\";" >> src/config/build.rs
          fi
          
          if [ -n "${{ github.event.inputs.server_key }}" ]; then
            echo "${{ github.event.inputs.server_key }}" > ./src/key.pub
          fi
          
          # Set connection type features
          CONNECTION_FEATURES=""
          case "${{ github.event.inputs.connection_type }}" in
            "incoming")
              CONNECTION_FEATURES="--features inline,incoming_only"
              ;;
            "outgoing")
              CONNECTION_FEATURES="--features inline,outgoing_only"
              ;;
            "both")
              CONNECTION_FEATURES="--features inline"
              ;;
          esac
          echo "CONNECTION_FEATURES=${CONNECTION_FEATURES}" >> $GITHUB_ENV

      - name: Build
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
        run: |
          cargo build --release ${CONNECTION_FEATURES}
          
      - name: Bundle macOS App
        run: |
          cargo bundle --release
          
      - name: Create DMG
        run: |
          brew install create-dmg
          create-dmg \
            --volname "RustDesk Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "RustDesk.app" 200 190 \
            --hide-extension "RustDesk.app" \
            --app-drop-link 600 185 \
            "RustDesk.dmg" \
            "target/release/bundle/macos/RustDesk.app"
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rustdesk-macos
          path: |
            RustDesk.dmg
            target/release/bundle/macos/RustDesk.app
