name: Build RustDesk macOS Custom Client

on:
  workflow_dispatch:
    inputs:
      server:
        description: 'Server'
        required: true
      key:
        description: 'Key'
        required: true
      apiServer:
        description: 'API Server'
        required: true
      custom:
        description: 'Custom settings'
        required: true
      uuid:
        description: 'UUID'
        required: true
      iconlink:
        description: 'Icon link'
        required: true
      logolink:
        description: 'Logo link'
        required: true
      appname:
        description: 'App name'
        required: true
      extras:
        description: 'Extra settings'
        required: true
      filename:
        description: 'Filename'
        required: true

env:
  SCITER_RUST_VERSION: "1.75"
  RUST_VERSION: "1.75"
  FLUTTER_VERSION: "3.19.6"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_COMMIT_ID: "1de2026f28ead93ff1773e6e680387643e914ea1"
  VERSION: "${{ fromJson(inputs.extras).version }}"
  RS_PUB_KEY: "${{ inputs.key }}"
  RENDEZVOUS_SERVER: "${{ inputs.server }}"
  CUSTOM: "${{ inputs.custom }}"
  UUIDFOLDER: "${{ inputs.uuid }}"
  API_SERVER: "${{ inputs.apiServer }}"
  UPLOAD_ARTIFACT: 'true'
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"
  STATUS_URL: "${{ secrets.GENURL }}/updategh"

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Update build status
        continue-on-error: true
        run: |
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"Starting macOS build...\"}"

      - uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: |
          brew install nasm yasm pkg-config
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }}
          rustup target add aarch64-apple-darwin

      - name: Download custom assets
        if: ${{ inputs.iconlink != 'false' || inputs.logolink != 'false' }}
        run: |
          mkdir -p ./src/ui/flutter/assets
          if [ "${{ inputs.iconlink }}" != "false" ]; then
            ICON_JSON='${{ inputs.iconlink }}'
            ICON_URL=$(echo $ICON_JSON | jq -r '.url')
            ICON_UUID=$(echo $ICON_JSON | jq -r '.uuid')
            ICON_FILE=$(echo $ICON_JSON | jq -r '.file')
            curl -o ./src/ui/flutter/assets/icon.png "$ICON_URL/png/$ICON_UUID/$ICON_FILE"
          fi
          if [ "${{ inputs.logolink }}" != "false" ]; then
            LOGO_JSON='${{ inputs.logolink }}'
            LOGO_URL=$(echo $LOGO_JSON | jq -r '.url')
            LOGO_UUID=$(echo $LOGO_JSON | jq -r '.uuid')
            LOGO_FILE=$(echo $LOGO_JSON | jq -r '.file')
            curl -o ./src/ui/flutter/assets/logo.png "$LOGO_URL/png/$LOGO_UUID/$LOGO_FILE"
          fi

      - name: Create custom.txt file
        run: |
          echo -n "${{ env.CUSTOM }}" | cat > ./src/custom.txt

      - name: Build macOS App
        run: |
          cd src/ui/flutter
          flutter pub get
          flutter build macos --release
          cd ../../../
          mkdir -p ./SignOutput

      - name: Create DMG
        run: |
          cd src/ui/flutter/build/macos/Build/Products/Release
          mv "RustDesk.app" "${{ inputs.appname }}.app"
          hdiutil create -volname "${{ inputs.appname }}" -srcfolder "${{ inputs.appname }}.app" -ov -format UDZO "${{ inputs.filename }}.dmg"
          mv "${{ inputs.filename }}.dmg" ../../../../../../../SignOutput/

      - name: Sign DMG
        if: env.MACOS_P12_BASE64 != ''
        env:
          MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
          MACOS_P12_PASSWORD: "${{ secrets.MACOS_P12_PASSWORD }}"
        run: |
          echo $MACOS_P12_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p mysecretpassword build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p mysecretpassword build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_P12_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k mysecretpassword build.keychain
          codesign --force -s "Developer ID Application" --keychain build.keychain "./SignOutput/${{ inputs.filename }}.dmg"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.filename }}
          path: ./SignOutput/${{ inputs.filename }}.dmg

      - name: Update build status
        if: always()
        continue-on-error: true
        run: |
          if [ ${{ job.status }} == "success" ]; then
            STATUS="Build completed successfully"
          else
            STATUS="Build failed"
          fi
          curl -X POST ${{ env.STATUS_URL }} \
          -H "Content-Type: application/json" \
          -d "{\"uuid\":\"${{ env.UUIDFOLDER }}\",\"status\":\"$STATUS\"}" 