name: Custom macOS Client Generator
run-name: Custom macOS Client Generator
on: 
  workflow_dispatch:
    inputs:
      server:
        description: 'Rendezvous Server'
        required: true
        default: ''
        type: string
      key:
        description: 'Public Key'
        required: true
        default: ''
        type: string
      apiServer:
        description: 'API Server'
        required: true
        default: ''
        type: string
      custom:
        description: "Custom JSON"
        required: true
        default: ''
        type: string
      uuid:
        description: "uuid of request"
        required: true
        default: ''
        type: string
      iconlink:
        description: "icon link"
        required: false
        default: 'false'
        type: string
      logolink:
        description: "logo link"
        required: false
        default: 'false'
        type: string
      appname:
        description: "app name"
        required: true
        default: 'rustdesk'
        type: string
      filename:
        description: "Filename"
        required: true
        default: 'rustdesk'
        type: string
      extras:
        description: "Extra options in JSON format"
        required: true
        default: '{}'
        type: string

env:
  FLUTTER_VERSION: "3.24.5"
  RUST_VERSION: "1.81"
  MAC_RUST_VERSION: "1.81"
  MACOS_MIN_VER: "12.3"
  STATUS_URL: "${{ format('https://api.rustdesk.com/status/{0}', inputs.uuid) }}"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml
    with:
      version: ${{ fromJson(inputs.extras).version }}

  build-macos:
    needs: [generate-bridge]
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: macos-13
            target: x86_64-apple-darwin
          - arch: arm64
            runner: macos-14
            target: aarch64-apple-darwin
    
    name: Build macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          brew install llvm create-dmg nasm cmake gcc wget ninja pkg-config

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.MAC_RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Set minimum macOS version
        run: |
          sed -i -e "s/MACOSX_DEPLOYMENT_TARGET\=[0-9]*.[0-9]*/MACOSX_DEPLOYMENT_TARGET=${MACOS_MIN_VER}/" build.py
          sed -i -e "s/platform :osx, '.*'/platform :osx, '${MACOS_MIN_VER}'/" flutter/macos/Podfile
          sed -i -e "s/osx_minimum_system_version = \"[0-9]*.[0-9]*\"/osx_minimum_system_version = \"${MACOS_MIN_VER}\"/" Cargo.toml
          sed -i -e "s/MACOSX_DEPLOYMENT_TARGET = [0-9]*.[0-9]*;/MACOSX_DEPLOYMENT_TARGET = ${MACOS_MIN_VER};/" flutter/macos/Runner.xcodeproj/project.pbxproj

      - name: cargo.toml, runner.rc name, en.rs
        continue-on-error: true
        shell: bash
        run: |
          cp ./Cargo.toml ./Cargo.toml.bak
          sed -i -e "s/name = \"rustdesk\"/name = \"${{ inputs.appname }}\"/" ./Cargo.toml
          sed -i -e "s/RustDesk/${{ inputs.appname }}/" ./src/lang/en.rs
          sed -i -e "s/RustDesk/${{ inputs.appname }}/" ./flutter/macos/Runner/Info.plist
          sed -i -e "s/RustDesk/${{ inputs.appname }}/" ./flutter/macos/Runner.xcodeproj/project.pbxproj

      - name: icon stuff
        if: ${{ inputs.iconlink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          mv ./res/icon.ico ./res/icon.ico.bak
          mv ./res/icon.png ./res/icon.png.bak
          mv ./res/tray-icon.ico ./res/tray-icon.ico.bak
          wget -O ./res/icon.png ${{ inputs.iconlink }}
          wget -O ./res/icon.ico ${{ inputs.iconlink }}
          wget -O ./res/tray-icon.ico ${{ inputs.iconlink }}
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_1024.png
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_128.png
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_16.png
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_256.png
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_32.png
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_512.png
          cp ./res/icon.png ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_64.png

      - name: logo stuff
        if: ${{ inputs.logolink != 'false' }}
        continue-on-error: true
        shell: bash
        run: |
          mv ./res/logo.ico ./res/logo.ico.bak
          mv ./res/logo.png ./res/logo.png.bak
          wget -O ./res/logo.png ${{ inputs.logolink }}
          wget -O ./res/logo.ico ${{ inputs.logolink }}

      - name: Build Generator
        env:
          RENDEZVOUS_SERVER: ${{ inputs.server }}
          RS_PUB_KEY: ${{ inputs.key }}
          API_SERVER: ${{ inputs.apiServer }}
          CUSTOM_JSON: ${{ inputs.custom }}
        run: |
          ./build.py --flutter --hwcodec

      - name: Create DMG
        run: |
          create-dmg \
            --icon "${{ inputs.appname }}.app" 200 190 \
            --hide-extension "${{ inputs.appname }}.app" \
            --window-size 800 400 \
            --app-drop-link 600 185 \
            ${{ inputs.filename }}-${{ matrix.arch }}.dmg \
            ./flutter/build/macos/Build/Products/Release/${{ inputs.appname }}.app

      - name: Code Sign (if credentials available)
        if: env.MACOS_P12_BASE64 != ''
        env:
          MACOS_P12_BASE64: ${{ secrets.MACOS_P12_BASE64 }}
          MACOS_P12_PASSWORD: ${{ secrets.MACOS_P12_PASSWORD }}
          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}
        run: |
          # Import certificate
          echo $MACOS_P12_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "$MACOS_P12_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_P12_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_P12_PASSWORD" build.keychain
          
          # Sign app and DMG
          codesign --force --options runtime -s "$MACOS_CODESIGN_IDENTITY" --deep ./flutter/build/macos/Build/Products/Release/${{ inputs.appname }}.app
          codesign --force --options runtime -s "$MACOS_CODESIGN_IDENTITY" ${{ inputs.filename }}-${{ matrix.arch }}.dmg

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.filename }}-macos-${{ matrix.arch }}
          path: ${{ inputs.filename }}-${{ matrix.arch }}.dmg

      - name: Report Status
        if: always()
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.STATUS_URL }}
          method: 'POST'
          data: '{"status": "${{ job.status }}", "job_type": "build", "os": "macos-${{ matrix.arch }}", "filename": "${{ inputs.filename }}-${{ matrix.arch }}.dmg"}'
